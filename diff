diff --git a/camera.h b/camera.h
index 88c9478..bb1fbc1 100644
--- a/camera.h
+++ b/camera.h
@@ -9,6 +9,7 @@
 #include "hittable_list.h"
 #include "material.h"
 
+#include <cmath>
 #include <iostream>
 
 class camera {
@@ -18,6 +19,11 @@ class camera {
         int    max_depth         =  10;  // maximum number of ray bounces into world.
         int    samples_per_pixel =  10;  // Count of random samples for each pixel
 
+        double vfov = 90;                // Vertical FOV
+        point3 lookfrom = point3(0,0,0); // Point camera is looking from
+        point3 lookat   = point3(0,0,-1);// Point camera is looking at
+        vec3   vup      = vec3(0,1,0);   // Camera - relative "up" direction
+
         void render(const hittable& world) {
             initialize();
 
@@ -44,6 +50,7 @@ class camera {
         point3  pixel00_loc;     // Locagtion of pixel 0, 0
         vec3    pixel_delta_u;   // Offset to pixel to the right
         vec3    pixel_delta_v;   // Offset to pixel bellow
+        vec3    u, v, w;         // Camera frame basis vectors. 
 
         void initialize() {
             image_height = int(image_width / aspect_ratio);
@@ -51,23 +58,30 @@ class camera {
 
             pixel_samples_scale = 1.0 / samples_per_pixel;
 
-            center = point3(0, 0, 0);
+            center = lookfrom;
 
             // Determine viewport dimensions.
-            auto focal_length = 1.0;
-            auto viewport_height = 2.0;
+            auto focal_length = (lookfrom - lookat).length();
+            auto theta = degrees_to_radians(vfov);
+            auto h = std::tan(theta/2);
+            auto viewport_height = 2 * h * focal_length;
             auto viewport_width = viewport_height * (double(image_width)/image_height);
 
+            // Calculate the u, v, w unit basis vectors for the camera coordinate frame.
+            w = unit_vector(lookfrom - lookat);
+            u = unit_vector(cross(vup, w));
+            v = cross(w, u);
+
             // Calculate the vectors across the horizontal and down the vertical viewport edges.
-            auto viewport_u = vec3(viewport_width, 0, 0);
-            auto viewport_v = vec3(0, -viewport_height, 0);
+            vec3 viewport_u = viewport_width * u;      // vec across viewport horizontal edge
+            vec3 viewport_v = viewport_height * -u;     // vec down viewport vertical edge
 
             // Calculate the horizontal and vertical delta vectors from pixel to pixel.
             pixel_delta_u = viewport_u / image_width;
             pixel_delta_v = viewport_v / image_height;
 
             // Calculate the location of the upper left pixel.
-            auto viewport_upper_left = center - vec3(0, 0, focal_length) - viewport_u/2 - viewport_v/2;
+            auto viewport_upper_left = center - (focal_length * w) - viewport_u/2 - viewport_v/2;
             pixel00_loc = viewport_upper_left + 0.5 * (pixel_delta_u + pixel_delta_v);
         }
 
diff --git a/main.cpp b/main.cpp
index e1d6017..f2a1c80 100644
--- a/main.cpp
+++ b/main.cpp
@@ -1,3 +1,4 @@
+#include <cmath>
 #include <memory>
 #include "hittable_list.h"
 #include "camera.h"
@@ -8,13 +9,14 @@
 
 using std::make_shared;
 
+/*
 int main () {
 
     // world
 
     auto material_ground = make_shared<lambertian>(color(0.9, 0.6, 0.7));
     auto material_center = make_shared<lambertian>(color(0.7, 0.2, 0.1));
-    auto material_left   = make_shared<metal>(color(0.2, 0.7, 0.1), 0);
+    auto material_left   = make_shared<metal>(color(0.2, 0.7, 0.1), 0.3);
     auto material_right  = make_shared<dielectric>(1.5);
     auto material_top    = make_shared<metal>(color(1,1,1));
 
@@ -32,9 +34,32 @@ int main () {
     camera cam;
 
     cam.aspect_ratio = 16.0 / 9.0;
-    cam.image_width = 400;
-    cam.max_depth = 50; // max ray-bouncing.
-    cam.samples_per_pixel = 50;
+    cam.image_width = 3000;
+    cam.max_depth = 10; // max ray-bouncing.
+    cam.samples_per_pixel = 1;
+
+    cam.render(world);
+}
+*/
+int main() {
+    hittable_list world;
+
+    auto R = std::cos(M_PI/4);
+
+    auto material_left  = make_shared<lambertian>(color(0,0,1));
+    auto material_right = make_shared<lambertian>(color(1,0,0));
+
+    world.add(make_shared<sphere>(point3(-R, 0, -1), R, material_left));
+    world.add(make_shared<sphere>(point3( R, 0, -1), R, material_right));
+
+    camera cam;
+
+    cam.aspect_ratio      = 16.0 / 9.0;
+    cam.image_width       = 400;
+    cam.samples_per_pixel = 100;
+    cam.max_depth         = 50;
+
+    cam.vfov = 90;
 
     cam.render(world);
 }
diff --git a/mlem.h b/mlem.h
index 88da5cc..23a5457 100644
--- a/mlem.h
+++ b/mlem.h
@@ -2,6 +2,7 @@
 /******* This file will contain usefull constants and more. ********/
 #define MLEM
 
+#include <cmath>
 #include <cstdlib>
 #include <limits>
 #include <memory>
@@ -10,6 +11,9 @@ using std::shared_ptr;
 using std::make_shared;
 
 // Utilityk
+double degrees_to_radians(double deg){
+    return deg * M_PI / 180.0;
+}
 
 double random_double() {
     // [0,1)
